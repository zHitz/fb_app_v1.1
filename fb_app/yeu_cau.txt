
# üìã N·∫øu mong mu·ªën d√πng **Webview** (app desktop frontend HTML + backend Python):

## üìå √ù t∆∞·ªüng:

- B·∫°n d√πng **`pywebview`**.
- Frontend HTML/CSS/JS v·∫´n nh∆∞ c≈©: c√≥ √¥ input, c√≥ n√∫t, c√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ.
- Backend (Python) s·∫Ω x·ª≠ l√Ω scraping (`facebook_scrapper.py`) v√† giao ti·∫øp tr·ª±c ti·∫øp v·ªõi HTML frontend **kh√¥ng c·∫ßn server Flask**.

---

# üî• ∆Øu ƒëi·ªÉm n·∫øu d√πng `pywebview`:
- Kh√¥ng c·∫ßn m·ªü Flask server, kh√¥ng c·∫ßn localhost, kh√¥ng c·∫ßn port.
- T·∫°o **·ª©ng d·ª•ng desktop** (nh∆∞ m·ªôt app Windows/Mac/Linux).
- Frontend v·∫´n vi·∫øt b·∫±ng HTML/CSS/JS b√¨nh th∆∞·ªùng.
- Backend Python g·ªçi ƒë∆∞·ª£c t·ª´ frontend JS **tr·ª±c ti·∫øp** th√¥ng qua API n·ªôi b·ªô c·ªßa webview.

---

# üõ†Ô∏è C√°ch ho·∫°t ƒë·ªông:

| Frontend HTML/JS | Backend Python |
|:---|:---|
| G·ª≠i l·ªánh (g·ªçi Python function) qua webview API | Nh·∫≠n d·ªØ li·ªáu t·ª´ frontend, ch·∫°y `extract_data()`, tr·∫£ k·∫øt qu·∫£ l·∫°i frontend |
| V√≠ d·ª• g·ªçi `window.pywebview.api.scrape(url)` | Python nh·∫≠n URL, scrape Facebook, tr·∫£ k·∫øt qu·∫£ |

---

# üì¶ C·∫•u tr√∫c code c∆° b·∫£n:

### 1. Python Backend (`main.py`)

```python
import webview
from facebook_scrapper import setup_driver, extract_data

class Api:
    def scrape(self, url):
        driver = setup_driver()
        result = extract_data(driver, url)
        driver.quit()
        return result

if __name__ == '__main__':
    api = Api()
    window = webview.create_window("Facebook Scraper", "frontend/index.html", js_api=api, width=800, height=600)
    webview.start()
```

---

### 2. HTML Frontend (`frontend/index.html`)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Facebook Scraper</title>
</head>
<body>
    <h1>Facebook Post Scraper</h1>
    <input type="text" id="urlInput" placeholder="Paste Facebook URL">
    <button onclick="scrape()">Scrape</button>

    <pre id="result"></pre>

    <script>
        async function scrape() {
            const url = document.getElementById('urlInput').value;
            const result = await window.pywebview.api.scrape(url);
            document.getElementById('result').innerText = JSON.stringify(result, null, 2);
        }
    </script>
</body>
</html>
```

---

# ‚ú® K·∫øt qu·∫£:
- User m·ªü app Desktop -> nh·∫≠p link Facebook -> click Scrape -> scrape d·ªØ li·ªáu real-time -> **hi·ªán k·∫øt qu·∫£ ngay** trong app **m√† kh√¥ng c·∫ßn web server**.
- ·ª®ng d·ª•ng nh√¨n nh∆∞ native app, nh·∫π, ƒë∆°n gi·∫£n.
  
---

# üöÄ ∆Øu ƒëi·ªÉm so v·ªõi Flask:
| Flask Server | pywebview |
|:---|:---|
| C·∫ßn server ch·∫°y (localhost ho·∫∑c VPS) | Kh√¥ng c·∫ßn server, th√†nh app desktop ngay |
| Ph·∫£i deploy n·∫øu public cho ng∆∞·ªùi kh√°c | ƒê√≥ng g√≥i th√†nh `.exe` (PyInstaller) d·ªÖ d√†ng |
| HTML load qua HTTP | HTML load t·ª´ file tr·ª±c ti·∫øp |

---

# üéØ T√≥m g·ªçn:

| B·∫°n mu·ªën | N√™n ch·ªçn |
|:---|:---|
| L√†m Web App (cho nhi·ªÅu ng∆∞·ªùi d√πng truy c·∫≠p) | Flask / FastAPI |
| L√†m App Desktop ri√™ng, frontend HTML | **pywebview** |

---

‚úÖ N·∫øu b·∫°n d√πng **pywebview**, th√¨:
- `frontend/index.html` --> vi·∫øt nh∆∞ web b√¨nh th∆∞·ªùng.
- `main.py` --> l√†m c·∫ßu n·ªëi HTML <-> Python backend (facebook_scrapper).
- **Kh√¥ng c·∫ßn Flask, kh√¥ng c·∫ßn web server.**

---

# üì¢ B·∫°n c·∫ßn l∆∞u √Ω:
- pywebview hi·ªán h·ªó tr·ª£ t·ªët Windows, MacOS, Linux.
- Tr√™n Windows ph·∫£i c√≥ **edgehtml** ho·∫∑c **Chromium Embedded Framework (CEF)** ƒë·ªÉ hi·ªÉn th·ªã web.

